# Observations gathered from my other notes:

- Began by learning the electron/npm related commands (preparing what CI jobs would need to do)
-> Pretty straightforward. Briefly went down a tangent into running the packaged electron app inside a container and connecting my wayland desktop (abandoned this).

- I'm fairly new to using GHA (have a little bit of experience with Gitea's Actions system)
- It seems a bit raw/'batteries not included' in a few places
  - Needing to explicitly checkout/clone the repository using a downloaded action
  - Being unable to use `env` in the `container:` stanza (`image` field), see comment related to a workaround I found in the workflow yml file
  - Made two clumsy attempts at carrying workspace state forward between dependent jobs (maybe just need to read more / learn the best way)
    - Goal was to only `npm install` or `npm build` once
    - The official docs on the yaml syntax for this are a bit lacking
    - Abandoned this, as a result I `npm install` wastefully in the bundle and package jobs (and `npm build` wastefully in the package job)

- I wasn't sure exactly what to put in the container image, so I included a group of packages that I installed in order to do my initial electron/npm explorations
  - This is larger than the set of needed packages: it's enough to build electron itself from source (and then carry out the rest of these steps)
  - But it's also enough to run the electron app from the container (if we set aside extra wayland issues!)

# Additional ideas to improve what I have presented here:

## Deliver Faster
- As mentioned above, carry workspace state forward between dependent jobs within the main workflow
- Cache some of the stuff we download / use a local package server near the runner
  - node packages
  - actions? (need to learn more about how this works behind the scenes)
  - deb package dependencies and container base image
- Don't always rebuild the container image
  - Something like `changed: Dockerfile` as in GitlabCI?
  - and then adjust the dependent jobs etc to match..?

## Deliver Higher Quality Software
- Extend the vulnerability scanning part with other concepts
  - Linting
  - Unit testing
  - Other testing (SAST DAST etc..?)
- Check/decide on the pinned versions of used actions
  - Some are "@v4", others are some commit SHA repeate from GHA docs examples
  - Pin these to some known/agreed upon list of versions *from outside this repo* via some env vars gathered at runtime? Hmm..

## Ease the onboarding of new developers

