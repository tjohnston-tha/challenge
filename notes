first had to learn a bit about building/bundling electron

can see definitions in package.json for start/package

in order to npm start inside the container, needed to add some runtime dependencies on top of node:latest
(admittedly this initial image was sort of an arbitrary choice - maybe there is an upstream 'best practices electron runner' image I can go find..)

went on a little journey through some SO threads etc chasing down those dependencies
but then found ground truth info here https://www.electronjs.org/docs/latest/development/build-instructions-linux
(as they say this is for building electron itself, but it does contain a superset of the packages we need, which we could pare down later to just the packaging/runtime dependencies and not the "building electron itself" part)
-> used that to create my initial Dockerfile just for exploring the electron build elements of this project

this is enough to npm install/start/"run package" (which gets and calls electron-builder and produces among other things a nice AppImage)

then I tried to run the built result from within the container and remembered that I'm on wayland, so nothing is easy!
https://unix.stackexchange.com/questions/330366/how-can-i-run-a-graphical-application-in-a-container-under-wayland#359244
for later (running within the container under wayland)
e.g.
docker run --rm -ti -e XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR -e WAYLAND_DISPLAY=$WAYLAND_DISPLAY --user (id -u):(id -g) -v .:/th -v $XDG_RUNTIME_DIR/$WAYLAND_DISPLAY:$XDG_RUNTIME_DIR/$WAYLAND_DISPLAY --name nts node-electron-deps:latest bash

which doesn't quite work but perhaps would if I did a bit more fiddling..

in any case, it runs fine outside the container after building inside :}

now, how about vulnerabilities/dependency scanning?
it prints something during the `npm install`.. is that all we want or is there another way?


