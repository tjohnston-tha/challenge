first had to learn a bit about building/bundling electron

can see definitions in package.json for start/package

in order to npm start inside the container, needed to add some runtime dependencies on top of node:latest
(admittedly this initial image was sort of an arbitrary choice - maybe there is an upstream 'best practices electron runner' image I can go find..)

went on a little journey through some SO threads etc chasing down those dependencies
but then found ground truth info here https://www.electronjs.org/docs/latest/development/build-instructions-linux
(as they say this is for building electron itself, but it does contain a superset of the packages we need, which we could pare down later to just the packaging/runtime dependencies and not the "building electron itself" part)
-> used that to create my initial Dockerfile just for exploring the electron build elements of this project

this is enough to npm install/start/"run package" (which gets and calls electron-builder and produces among other things a nice AppImage)

then I tried to run the built result from within the container and remembered that I'm on wayland, so nothing is easy!
https://unix.stackexchange.com/questions/330366/how-can-i-run-a-graphical-application-in-a-container-under-wayland#359244
for later (running within the container under wayland)
e.g.
`docker run --rm -ti -e XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR -e WAYLAND_DISPLAY=$WAYLAND_DISPLAY --user (id -u):(id -g) -v .:/th -v $XDG_RUNTIME_DIR/$WAYLAND_DISPLAY:$XDG_RUNTIME_DIR/$WAYLAND_DISPLAY --name nts node-electron-deps:latest bash`

which doesn't quite work but perhaps would if I did a bit more fiddling..

in any case, it runs fine outside the container after building inside :}
----------------------
now, how about vulnerabilities/dependency scanning?
it prints something during the `npm install`.. is that all we want or is there another way?

`npm outdated`
`npm audit --audit-level <high/critical>` doesn't do what I expected, that lead me to this
https://stackoverflow.com/questions/50314082/how-to-check-for-only-high-vulnerabilities-when-using-npm-audit
which lead me to this
https://github.com/npm/npm/issues/20596
seems like a dead end, also lots of people suggest grepping `audit` output but it's not foolproof (e.g. if package names have "high" in them etc)

let's just use jq to find what we want instead of error-prone grepping

`npm audit --json | jq '.vulnerabilities[] | select (.severity == "high")'`
seems to work

-> should also run electronegativity too (mentioned in the README)
changed the package.json to give output in csv format so I can grab it more easily without all the prettyprinting/fanciness
------------
so now I know how to do almost everything, let's make CI do it..
- build+bundle: npm install/run build and tar c
- notification: ???figure it out when we get there
- find vulns: as above audit|jq
  - include it in the notification!
- package+run: npm run package and grab the result package/ path as artifacts
  - all? some? just the appimage?
- containerize the build: build from my dockerfile, run the above inside a container made from the result image
-------------
created a new gh account
set up ssh pubkey

created blank repo, pushed up what i had already

actions>build docker image (gives a template actions yaml to begin with)

push that to a new branch, make a PR, watch the first run to see the image get built..

> naming to docker.io/library/electron-builder:1749400218 done
(default label in the yaml is a unix timestamp)

this creates the image but doesn't push it anywhere

fortunately we can push to ghcr.io using this other canned yaml:
https://docs.github.com/en/actions/use-cases-and-examples/publishing-packages/publishing-docker-images

and see here for other actions-related docs in general:
https://docs.github.com/en/actions/writing-workflows/quickstart
--------------
now we have an image built and pushed
let's find vulns, build+bundle js, package the appimage and send a notification


